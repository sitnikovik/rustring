<?php

namespace Sitnikovik\RussianStrings;

use Exception;
use Sitnikovik\RussianStrings\Exceptions\InvalidPassportIssuerException;
use Sitnikovik\RussianStrings\Exceptions\InvalidPassportNumberException;
use Sitnikovik\RussianStrings\Exceptions\InvalidPassportSeriesException;

/**
 * Хелпер для работы с российскими паспортами
 */
class Passport
{
    /**
     * Общероссийский классификатор объектов административно-территориального деления
     */
    protected const OKATO_REGIONS = [
        '45' => 'Москва',
        '40' => 'Санкт-Петербург',
        '01' => 'Алтайский край',
        '10' => 'Амурская область',
        '11' => 'Архангельская область',
        '12' => 'Астраханская область',
        '14' => 'Белгородская область',
        '15' => 'Брянская область',
        '17' => 'Владимирская область',
        '18' => 'Волгоградская область',
        '19' => 'Вологодская область',
        '20' => 'Воронежская область',
        '99' => 'Еврейская автономная область',
        '76' => 'Забайкальский край',
        '24' => 'Ивановская область',
        '25' => 'Иркутская область',
        '83' => 'Кабардино-Балкарская Республика',
        '27' => 'Калининградская область',
        '29' => 'Калужская область',
        '30' => 'Камчатский край',
        '91' => 'Карачаево-Черкесская Республика',
        '32' => 'Кемеровская область',
        '33' => 'Кировская область',
        '34' => 'Костромская область',
        '03' => 'Краснодарский край',
        '04' => 'Красноярский край',
        '37' => 'Курганская область',
        '38' => 'Курская область',
        '41' => 'Ленинградская область',
        '42' => 'Липецкая область',
        '44' => 'Магаданская область',
        '46' => 'Московская область',
        '47' => 'Мурманская область',
        '22' => 'Нижегородская область',
        '49' => 'Новгородская область',
        '50' => 'Новосибирская область',
        '52' => 'Омская область',
        '53' => 'Оренбургская область',
        '54' => 'Орловская область',
        '56' => 'Пензенская область',
        '57' => 'Пермский край',
        '05' => 'Приморский край',
        '58' => 'Псковская область',
        '79' => 'Республика Адыгея (Адыгея)',
        '84' => 'Республика Алтай',
        '80' => 'Республика Башкортостан',
        '81' => 'Республика Бурятия',
        '82' => 'Республика Дагестан',
        '26' => 'Республика Ингушетия',
        '85' => 'Республика Калмыкия',
        '86' => 'Республика Карелия',
        '87' => 'Республика Коми',
        '88' => 'Республика Марий Эл',
        '89' => 'Республика Мордовия',
        '98' => 'Республика Саха (Якутия)',
        '90' => 'Республика Северная Осетия-Алания',
        '92' => 'Республика Татарстан',
        '93' => 'Республика Тыва',
        '95' => 'Республика Хакасия',
        '60' => 'Ростовская область',
        '61' => 'Рязанская область',
        '36' => 'Самарская область',
        '63' => 'Саратовская область',
        '64' => 'Сахалинская область',
        '65' => 'Свердловская область',
        '66' => 'Смоленская область',
        '07' => 'Ставропольский край',
        '68' => 'Тамбовская область',
        '28' => 'Тверская область',
        '69' => 'Томская область',
        '70' => 'Тульская область',
        '71' => 'Тюменская область',
        '94' => 'Удмуртская Республика',
        '73' => 'Ульяновская область',
        '08' => 'Хабаровский край',
        '75' => 'Челябинская область',
        '96' => 'Чеченская Республика',
        '97' => 'Чувашская Республика-Чувашия',
        '77' => 'Чукотский автономный округ',
        '78' => 'Ярославская область'
    ];

    /**
     * Коды субъектов Российской Федерации
     */
    public const KLADR_REGIONS = [
        '77' => 'Москва',
        '50' => 'Московская область',
        '22' => 'Алтайский край',
        '28' => 'Амурская область',
        '29' => 'Архангельская область',
        '30' => 'Астраханская область',
        '31' => 'Белгородская область',
        '32' => 'Брянская область',
        '33' => 'Владимирская область',
        '34' => 'Волгоградская область',
        '35' => 'Вологодская область' ,
        '36' => 'Воронежская область',
        '78' => 'Санкт-Петербург' ,
        '92' => 'Севастополь',
        '79' => 'Еврейская автономная область',
        '75' => 'Забайкальский край',
        '37' => 'Ивановская область',
        '38' => 'Иркутская область',
        '07' => 'Кабардино-Балкарская Республика',
        '39' => 'Калининградская область',
        '40' => 'Калужская область',
        '41' => 'Камчатский край',
        '09' => 'Карачаево-Черкесская Республика',
        '42' => 'Кемеровская область',
        '43' => 'Кировская область',
        '44' => 'Костромская область',
        '23' => 'Краснодарский край',
        '24' => 'Красноярский край',
        '45' => 'Курганская область',
        '46' => 'Курская область',
        '47' => 'Ленинградская область',
        '48' => 'Липецкая область',
        '49' => 'Магаданская область',
        '51' => 'Мурманская область',
        '83' => 'Ненецкий автономный округ',
        '52' => 'Нижегородская область',
        '53' => 'Новгородская область',
        '54' => 'Новосибирская область',
        '55' => 'Омская область',
        '56' => 'Оренбургская область',
        '57' => 'Орловская область',
        '58' => 'Пензенская область',
        '59' => 'Пермский край',
        '25' => 'Приморский край',
        '60' => 'Псковская область',
        '01' => 'Республика Адыгея',
        '02' => 'Республика Алтай',
        '03' => 'Республика Башкортостан',
        '04' => 'Республика Бурятия',
        '05' => 'Республика Дагестан',
        '06' => 'Республика Ингушетия',
        '08' => 'Республика Калмыкия',
        '10' => 'Республика Карелия',
        '11' => 'Республика Коми',
        '91' => 'Республика Крым',
        '12' => 'Республика Марий Эл',
        '13' => 'Республика Мордовия',
        '14' => 'Республика Саха (Якутия)',
        '15' => 'Республика Северная Осетия-Алания',
        '16' => 'Республика Татарстан',
        '17' => 'Республика Тыва',
        '19' => 'Республика Хакасия',
        '61' => 'Ростовская область',
        '62' => 'Рязанская область',
        '63' => 'Самарская область',
        '64' => 'Саратовская область',
        '65' => 'Сахалинская область',
        '66' => 'Свердловская область',
        '67' => 'Смоленская область',
        '26' => 'Ставропольский край',
        '68' => 'Тамбовская область',
        '69' => 'Тверская область',
        '70' => 'Томская область',
        '71' => 'Тульская область',
        '72' => 'Тюменская область',
        '18' => 'Удмуртская Республика',
        '73' => 'Ульяновская область',
        '27' => 'Хабаровский край',
        '86' => 'Ханты-Мансийский АО-Югра',
        '74' => 'Челябинская область',
        '20' => 'Чеченская Республика',
        '21' => 'Чувашская Республика',
        '87' => 'Чукотский автономный округ',
        '89' => 'Ямало-Ненецкий автономный округ',
        '76' => 'Ярославская область',
        '95' => 'Территории за пределами РФ'
    ];

    /**
     * Определить название региона по его коду
     *
     * @param string $code Состоит из 2 цифр
     * @return string|null
     */
    protected static function getOkatoRegionNameByCode(string $code): ?string
    {
        return self::OKATO_REGIONS[$code] ?? null;
    }

    /**
     * Определить название региона по его коду
     *
     * @param string $code Состоит из 2 цифр
     * @return string|null
     */
    protected static function getKladrRegionNameByCode(string $code): ?string
    {
        return self::KLADR_REGIONS[$code] ?? null;
    }

    /**
     * Проверяет, корректен ли номер паспорта
     *
     * @param string $fullNumber
     * @return bool
     */
    public static function isNumberValid(string $fullNumber): bool
    {
        try {
            self::validate($fullNumber);
        } catch (Exception $e) {
            return false;
        }

        return true;
    }

    /**
     * Проверяет, корректен ли номер паспорта
     *
     * @param string $fullNumber Серия и номер паспорта
     * @param string|null $issuerCode Код подразделения
     *
     * @return void
     *
     * @throws InvalidPassportNumberException
     * @throws InvalidPassportSeriesException
     * @throws InvalidPassportIssuerException
     */
    public static function validate(string $fullNumber, ?string $issuerCode = null): void
    {
        if (preg_match('/\w/',$fullNumber)) {
            throw new InvalidPassportNumberException("паспорт РФ не может содержать буквы");
        }

        $formatted = self::parseNumber($fullNumber);

        $okatoRegion = self::getOkatoRegionNameByCode($formatted['regionCode']);
        if ($okatoRegion === null) {
            throw new InvalidPassportSeriesException("код ОКАТО не валиден");
        }

        if ((int)$formatted['yearOfCreated'] < 97 && (int)$formatted['yearOfCreated'] > (int)date('y') + 3) {
            throw new InvalidPassportSeriesException("бланки паспорта РФ начали выдавать с 1997 года");
        }

        if ((int)$formatted['number'] < 101) {
            throw new InvalidPassportNumberException("номер бланка может быть от 000101 до 999999");
        }

        if (!empty($issuerCode)) {
            $issuerRegion = self::getKladrRegionNameByCode(substr($issuerCode, 0, 2));
            if ($issuerRegion === null) {
                throw new InvalidPassportIssuerException("номер не валиден");
            }

            if ($issuerRegion !== $okatoRegion) {
                throw new InvalidPassportIssuerException("регион выдавший паспорт отличается от региона бланка паспорта");
            }
        }
    }

    /**
     * Парсит серия и номер паспорта в виде массива, состоящего из:
     *
     * - Код региона ОКАТО
     * - Год печати бланка
     * - Номер бланка
     *
     * @return string[]
     * @throws InvalidPassportNumberException
     */
    private static function parseNumber(string $fullNumber): array
    {
        $formatted = str_replace(" ", "", $fullNumber);

        if (strlen($formatted) !== 10) {
            throw new InvalidPassportNumberException("Паспорт РФ может состоять только из 10 цифр");
        }

        return [
            'regionCode' => substr($formatted, 0, 2),
            'yearOfCreated' => substr($formatted, 2, 2),
            'number' => substr($formatted, 4, 6)
        ];
    }
}